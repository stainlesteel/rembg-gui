import gi
import os
gi.require_version('Gtk', '4.0')
gi.require_version('Adw', '1')
from gi.repository import Gtk, Gdk, Adw, Gio, GdkPixbuf
import glob
from rembg import remove
import io

class MyWindow(Adw.ApplicationWindow):
    def __init__(self, application, **kargs):
        super().__init__(application=application, **kargs)
        self.set_default_size(400, 300)
        self.set_title("rembg")

        self.box = Gtk.Box(orientation=Gtk.Orientation.VERTICAL,spacing=12)
        self.box.set_halign(Gtk.Align.CENTER)
        self.box.set_valign(Gtk.Align.CENTER)
        self.header = Adw.HeaderBar()

        self.title = Adw.WindowTitle(title="rembg") 
        self.header.set_title_widget(self.title)

        self.head = Gtk.Label(label="rembg")
        self.subtitle = Gtk.Label(label="Remove a Background")

        self.box.append(self.head)
        self.box.append(self.subtitle)

        self.button = Gtk.Button.new_with_label('Continue')
        self.button.connect("clicked", self.file)
        self.box.append(self.button)

        self.tools = Adw.ToolbarView()
        self.tools.add_top_bar(self.header)
        self.tools.set_content(self.box)

        self.set_content(self.tools)

        self.head.add_css_class("big")
        self.button.add_css_class("pill")
        self.box.add_css_class("app")

    def file(self, par):
      self.diag = Gtk.FileDialog(title="Open Image")
      self.diag.open(
            self,
            None,
            self.on_response
        )
    def on_response(self, diag, response):
        print(response)
        fil = self.diag.open_finish(response)
        if fil:
            print("success!")
            fpath = fil.get_path()
            print(f"{fpath}")
            while child := self.box.get_first_child():
                self.box.remove(child)
            

            with open(fpath, 'rb') as f:
                ini = f.read()
            outi = remove(ini, return_bytes=True)
            opath = os.path.dirname(fpath)

            bmg = io.BytesIO(outi)

            self.cbox = Gtk.Box(orientation=Gtk.Orientation.VERTICAL,spacing=12)
            self.cbox.set_halign(Gtk.Align.CENTER)
            self.cbox.set_valign(Gtk.Align.CENTER)
            self.tools.set_content(self.cbox)

            fname = os.path.basename(fpath)
            split = os.path.splitext(fname)
            name = f"{split[0]}(no-bg).png"
            self.img_txt = Gtk.Label(label=name)
            self.cbox.append(self.img_txt)
            self.cbox.add_css_class("app")
            self.img_txt.add_css_class("mid")

            raw = bmg.getvalue()

            img = Gio.MemoryInputStream.new_from_data(raw)
            pixbuf = GdkPixbuf.Pixbuf.new_from_stream_at_scale(img, -1, -1, True)
            pain = Gdk.Paintable.new_from_pixbuf(pixbuf)
            self.img_widget = Gtk.Image()
            self.img_widget.set_from_paintable(pain)
            self.cbox.append(self.img_widget)






            
def on_activate(app):
    # Create window
    win = MyWindow(application=app)
    win.present()


class MyApp(Adw.Application):
    def __init__(self):
        super().__init__(application_id='com.example.App')

    def do_startup(self):
        Gtk.Application.do_startup(self)
        gss = Gtk.CssProvider()
        dis = Gdk.Display.get_default()
        Gtk.StyleContext.add_provider_for_display(
            dis, gss, Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION
        )

        adw_css_path = glob.glob('/usr/share/themes/Adwaita/gtk-4.0/gtk.css')
        if adw_css_path:
            adw_gss = Gtk.CssProvider()
            adw_gss.load_from_path(adw_css_path[0])
            Gtk.StyleContext.add_provider_for_display(
                dis, adw_gss, Gtk.STYLE_PROVIDER_PRIORITY_THEME
            )


        cfile = os.path.join(os.path.dirname(__file__), "style.css")
        gss.load_from_path(cfile)
        Gtk.StyleContext.add_provider_for_display(
            dis, gss, Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION
        )
    
    def do_activate(self):
        win = self.props.active_window
        if not win:
            win = MyWindow(self)
        win.present()

app = MyApp()
app.run(None)
